version: 2
workflows:
  version: 2
  test:
    jobs:
      - contract_tg4_engagement
      - contract_tg4_mixer
      - contract_tg4_stake
      - contract_tgrade_community_pool
      - contract_tgrade_gov_reflect
      - contract_tgrade_valset
      - contract_tgrade_validator_voting
      - contract_tgrade_vesting_account
      - package_bindings
      - package_bindings_test
      - package_utils
      - package_tg4
      - package_voting_contract
      - package_test_utils
  build:
    jobs:
      - lint
      - wasm-build
  deploy:
    jobs:
      - build_and_upload_contracts:
          filters:
           tags:
             only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
           branches:
             ignore: /.*/
      - build_and_upload_schemas:
          filters:
           tags:
             only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
           branches:
             ignore: /.*/

jobs:
  contract_tg4_engagement:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tg4-engagement
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tg4-engagement-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tg4-engagement-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tg4_mixer:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tg4-mixer
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tg4-mixer-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tg4-mixer-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tg4_stake:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tg4-stake
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tg4-stake-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tg4-stake-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tgrade_gov_reflect:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tgrade-gov-reflect
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tgrade-gov-reflect-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tgrade-gov-reflect-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tgrade_valset:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tgrade-valset
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tgrade-valset-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tgrade-valset-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tgrade_validator_voting:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tgrade-validator-voting
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tgrade-validator-voting-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tgrade-validator-voting-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tgrade_vesting_account:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tgrade-vesting-account
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tgrade-vesting-account-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tgrade-vesting-account-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  contract_tgrade_community_pool:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/contracts/tgrade-community-pool
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-tgrade-validator-voting-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit Tests
          environment:
            RUST_BACKTRACE: 1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-tgrade-validator-voting-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}


  package_bindings:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/packages/bindings
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-bindings:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-bindings:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  package_bindings_test:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/packages/bindings-test
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-bindings-test:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-bindings-test:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  package_utils:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/packages/utils
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-utils:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-utils:1.53.0-{{ checksum "~/project/Cargo.lock" }}


  package_tg4:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/packages/tg4
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-tg4:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-tg4:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  package_voting_contract:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/packages/voting-contract
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-tg4:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-tg4:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  package_test_utils:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project/packages/voting-contract
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-tg4:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-tg4:1.53.0-{{ checksum "~/project/Cargo.lock" }}

  lint:
    docker:
      - image: rust:1.53.0
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-lint-rust:1.53.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Add clippy component
          command: rustup component add clippy
      - run:
          name: Clippy linting on workspace
          command: cargo clippy --tests -- -D warnings

      - run:
          name: Check formatting of workspace
          command: cargo fmt -- --check
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-lint-rust:1.53.0-{{ checksum "Cargo.lock" }}

  # This runs one time on the top level to ensure all contracts compile properly into wasm.
  # We don't run the wasm build per contract build, and then reuse a lot of the same dependencies, so this speeds up CI time
  # for all the other tests.
  # We also sanity-check the resultant wasm files.
  wasm-build:
    docker:
      - image: rust:1.53.0
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-wasm-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown
      - run:
          name: Build Wasm Release
          command: |
            for C in ./contracts/*/
            do
              echo "Compiling $(basename $C) ..."
              (cd $C && cargo build --release --target wasm32-unknown-unknown --locked)
            done
      - run:
          name: Install check_contract
          # Uses --debug for compilation speed.
          command: cargo install --debug --features iterator --example check_contract --version 1.0.0-beta2 -- cosmwasm-vm
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-wasm-rust:1.53.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Check wasm contracts
          command: |
            for W in ./target/wasm32-unknown-unknown/release/*.wasm
            do
              echo -n "Checking $(basename $W) ... "
              check_contract --supported-features iterator,staking,stargate,tgrade $W
            done

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_contracts:
    docker:
      # Image from https://github.com/cibuilds/github, based on alpine
      - image: cibuilds/github:0.13
    steps:
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - setup_remote_docker
      - checkout
      - run:
          # We cannot mount local folders, see https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Prepare volume with source code
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v /code --name with_code alpine /bin/true
            # copy a config file into this volume
            docker cp Cargo.toml with_code:/code
            docker cp Cargo.lock with_code:/code
            # copy code into this volume
            docker cp ./contracts with_code:/code
            docker cp ./packages with_code:/code
      - run:
          name: Build development contracts
          command: |
            docker run --volumes-from with_code cosmwasm/workspace-optimizer:0.12.4
            docker cp with_code:/code/artifacts ./artifacts
      - run:
          name: Show data
          command: |
            ls -l artifacts
            cat artifacts/checksums.txt
      - run:
          name: Publish artifacts on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -replace \
              "$TAG" ./artifacts/

  build_and_upload_schemas:
    docker:
      - image: rust:1.53.0
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Create schemas directory
          command: mkdir -p schemas
      - run:
          name: Install ghr
          command: wget https://github.com/tcnksm/ghr/releases/download/v0.14.0/ghr_v0.14.0_linux_amd64.tar.gz -O - | tar -zxvf - -C /usr/local/bin --wildcards --strip-components 1 */ghr
      - run:
          name: Build and run schema generator for packages
          command: |
            for S in ./packages/*/examples/schema.rs
            do
              P=$(dirname $S)/..
              echo "Generating schema for $P ..."
              (cd $P && cargo schema --locked && tar -zcf ~/project/schemas/$(basename $(pwd))_schema.tar.gz ./schema)
            done
      - run:
          name: Build and run schema generator for contracts
          command: |
            for C in ./contracts/*/
            do
              echo "Generating schema for $C ..."
              (cd $C && cargo schema --locked && tar -zcf ~/project/schemas/$(basename $(pwd))_schema.tar.gz ./schema)
            done
      - run:
          name: Show data
          command: ls -l ./schemas
      - run:
          name: Publish schemas on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some schemas and build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -replace \
              "$TAG" ./schemas/
